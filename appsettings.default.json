{
  "Administration": {
    "Repository": "MongoDb", //"SQLite", //Memory / SQL / MongoDb
    "MongoDbOptions": {
      "ConnectionString": "mongodb://localhost/vonkadmin",
      "EntryCollection": "vonkentries"
    },
    "CosmosDbOptions": {
      "ConnectionString": "mongodb://<password>@<server>:10255/vonk-admin?ssl=true&replicaSet=globaldb",
      "EntryCollection": "vonkentries"
    },
    "SqlDbOptions": {
      "ConnectionString": "connectionstring to your Firely Server Admin SQL Server database (SQL2012 or newer); Set MultipleActiveResultSets=True",
      "AutoUpdateDatabase": true,
      "MigrationTimeout": 1800 // in seconds
      //"AutoUpdateConnectionString" : "set this to the same database as 'ConnectionString' but with credentials that can alter the database. If not set, defaults to the value of 'ConnectionString'"
    },
    "SQLiteDbOptions": {
      "ConnectionString": "Data Source=./data/vonkadmin.db;Cache=Shared", //"connectionstring to your Firely Server Admin SQLite database (version 3 or newer), e.g. Data Source=c:/sqlite/vonkadmin.db;Cache=Shared"
      "AutoUpdateDatabase": true,
      "MigrationTimeout": 1800 // in seconds
      //"AutoUpdateConnectionString" : "set this to the same database as 'ConnectionString' but with credentials that can alter the database. If not set, defaults to the value of 'ConnectionString'"
    },
    "Security": {
      "AllowedNetworks": [ "127.0.0.1", "::1" ], // i.e.: ["127.0.0.1", "::1" (ipv6 localhost), "10.1.50.0/24", "10.5.3.0/24", "31.161.91.98"]
      "OperationsToBeSecured": [ "reindex", "reset", "preload", "importResources" ]
    }
  },
  "License": {
    "LicenseFile": "firelyserver-license.json",
    "RequestInfoFile": "./.vonk-request-info.json",
    "WriteRequestInfoFileInterval": 15 // in minutes
  },
  "Repository": "MongoDb", //Memory / SQL / MongoDb / CosmosDb
  "Hosting": {
    "HttpPort": 4080
    //"HttpsPort": 4081, // Enable this to use https
    //"CertificateFile": "<your-certificate-file>.pfx", //Relevant when HttpsPort is present
    //"CertificatePassword" : "<cert-pass>" // Relevant when HttpsPort is present
  },
  "Validation": {
    "Parsing": "Strict", // Permissive / Strict
    "Level": "Full", // Off / Core / Full
    "AllowedProfiles": []
  },
  "Terminology": {
    "LocalTerminologyService": {
      "Order": 10,
      "PreferredSystems": [ "http://hl7.org/fhir" ],
      "SupportedInteractions": [ "ValueSetValidateCode", "Expand", "FindMatches", "Lookup" ], // ValueSetValidateCode, Expand, FindMatches, Lookup
      "SupportedInformationModels": [ "Fhir3.0", "Fhir4.0", "Fhir5.0" ]
    }
    //Example settings for remote services:
    //, 
    //"RemoteTerminologyServices": [
    //  {
    //    "Order": 20,
    //    "PreferredSystems": [ "http://snomed.info/sct" ],
    //    "SupportedInteractions": [ "ValueSetValidateCode", "Expand", "Lookup", "Translate", "Subsumes", "Closure" ], // ValueSetValidateCode, Expand, Lookup, Translate, Subsumes, Closure
    //    "SupportedInformationModels": [ "Fhir4.0" ],
    //    "Endpoint": "https://r4.ontoserver.csiro.au/fhir/",
    //    "MediaType": "application/fhir+xml"
    //  },
    //  {
    //    "Order": 30,
    //    "PreferredSystems": [ "http://loinc.org" ],
    //    "SupportedInteractions": [ "ValueSetValidateCode", "Expand", "Translate" ],
    //    "SupportedInformationModels": [ "Fhir3.0", "Fhir4.0" ],
    //    "Endpoint": "https://fhir.loinc.org/",
    //    "Username": "",
    //    "Password": ""
    //  }
    //]
  },
  "Cache": {
    "MaxConformanceResources": 5000
  },
  "MongoDbOptions": {
    "ConnectionString": "mongodb://localhost/vonkdata",
    "EntryCollection": "vonkentries",
    "SimulateTransactions": "false"
  },
  "CosmosDbOptions": {
    "ConnectionString": "mongodb://<password>@<server>:10255/vonk?ssl=true&replicaSet=globaldb",
    "EntryCollection": "vonkentries"
  },
  "SqlDbOptions": {
    "ConnectionString": "connectionstring to your Firely Server SQL Server database (SQL2012 or newer); Set MultipleActiveResultSets=True",
    "AutoUpdateDatabase": true,
    "MigrationTimeout": 1800 // in seconds
    //"AutoUpdateConnectionString" : "set this to the same database as 'ConnectionString' but with credentials that can alter the database. If not set, defaults to the value of 'ConnectionString'"
  },
  "SQLiteDbOptions": {
    "ConnectionString": "Data Source=./data/vonkdata.db;Cache=Shared", //"connectionstring to your Firely Server SQLite database (version 3 or newer), e.g. Data Source=c:/sqlite/vonkdata.db",
    "AutoUpdateDatabase": true,
    "MigrationTimeout": 1800 // in seconds
    //"AutoUpdateConnectionString" : "set this to the same database as 'ConnectionString' but with credentials that can alter the database. If not set, defaults to the value of 'ConnectionString'"
  },
  "MemoryOptions": {
    "SimulateTransactions": false
  },
  "BundleOptions": {
    "DefaultCount": 10,
    "MaxCount": 50,
    "DefaultSort": "-_lastUpdated"
  },
  "HistoryOptions": {
    "MaxReturnedResults": 100
  },
  "SizeLimits": {
    "MaxResourceSize": "1MiB", // b/kB/KiB/Mb/MiB, no spaces
    "MaxBatchSize": "5MiB",
    "MaxBatchEntries": 2000
  },
  "ReindexOptions": {
    "BatchSize": 100,
    "MaxDegreeOfParallelism": 10
  },
  "FhirCapabilities": {
    "ConditionalDeleteOptions": {
      "ConditionalDeleteType": "Single", // Single or Multiple,
      "ConditionalDeleteMaxItems": 1
    },
    "SearchOptions": {
      "MaximumIncludeIterationDepth": 3
    }
  },
  "SupportedInteractions": {
    "InstanceLevelInteractions": "read, vread, update, patch, delete, history, conditional_delete, conditional_update, $validate, $validate-code, $expand, $compose, $find-matches, $meta, $meta-add, $meta-delete, $document, $translate, $subsumes, $export, $everything",
    "TypeLevelInteractions": "create, search, history, conditional_create, compartment_type_search, $validate, $snapshot, $validate-code, $expand, $lookup, $compose, $find-matches, $document, $translate, $subsumes, $export",
    "WholeSystemInteractions": "capabilities, batch, transaction, history, search, compartment_system_search, $validate, $convert, $versions, $export, $exportstatus, $exportfilerequest, $closure"
  },
  "SupportedModel": {
    //"RestrictToResources": [ "Patient", "Observation" ]
    //"RestrictToSearchParameters": ["Patient.active"]
    //"RestrictToCompartments": ["Patient"]
  },
  "SubscriptionEvaluatorOptions": {
    "Enabled": true,
    "RepeatPeriod": 20000,
    "SubscriptionBatchSize": 1,
    "RetryPeriod": 30000,
    "MaximumRetries": 3,
    "SendRestHookAsCreate": false //set to true for Vonk < 3.9.3 behaviour; set to false (default) for specification compliance
  },
  "Audit": {
    "Path": "./audit/AuditLog.log",
    "RollingInterval": "Day"
    //"OutputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Application}] [Audit] {RequestResponse} [Machine: {MachineName}] [ReqId: {RequestId}] [IP-Address: {Ip}] [Connection: {ConnectionId}] {UserId} {Username} [Path: {Path}] [Action: {Action}] [Resource: {Resource} Key:{ResourceKey}] [StatusCode: {StatusCode}] {NewLine}"
  },
  "AdministrationImportOptions": {
    "ImportDirectory": "./vonk-import",
    "ImportedDirectory": "./vonk-imported", //Do not place ImportedDirectory *under* ImportDirectory, since an import will recursively read all subdirectories.
    "SimplifierProjects": [
      {
        "Uri": "https://fhir.simplifier.net/KNU.MyHealthHub",
        "UserName": "eara0367@gmail.com",
        "Password": "dldkfk1!@",
        "BatchSize": 20
      }
        ],
        "MaxInParallel": 1 //Optimal value for default SQLite database; SQL Server or MongoDB profit from a setting of 10.
      },
  "SmartAuthorizationOptions": {
    "Enabled": false,
    "Filters": [
      {
        "FilterType": "Patient", //Filter on a Patient compartment if a 'patient' launch scope is in the auth token
        "FilterArgument": "identifier=#patient#" //... for the Patient that has an identifier matching the value of that 'patient' launch scope
      },
      {
        "FilterType": "Encounter", //Filter on an Encounter compartment if an 'encounter' launch scope is in the auth token
        "FilterArgument": "identifier=#encounter#" //... for the Encounter that has an identifier matching the value of that 'encounter' launch scope
      },
      {
        "FilterType": "Location", //Filter on a Location compartment if a 'location' launch scope is in the auth token
        "FilterArgument": "identifier=#location#" //... for the Location that has an identifier matching the value of that 'location' launch scope
      }
    ],
    "Authority": "url-to-your-identity-provider",
    //"AdditionalEndpointBaseAddresses": ["additonal-url-to-your-identity-provider"],
    //"ClaimsNamespace": "http://smarthealthit.org",
    //"Audience": "vonk", //Has to match the value the Authority provides in the audience claim.
    "RequireHttpsToProvider": false, //You want this set to true (the default) in a production environment!
    "Protected": {
      "InstanceLevelInteractions": "read, vread, update, patch, delete, history, conditional_delete, conditional_update, $validate, $meta, $meta-add, $meta-delete, $export, $everything",
      "TypeLevelInteractions": "create, search, history, conditional_create, compartment_type_search, $export",
      "WholeSystemInteractions": "batch, transaction, history, search, compartment_system_search, $export, $exportstatus, $exportfilerequest"
    },
    "TokenIntrospection": {
        "ClientId": "vonk",
        "ClientSecret": "secret"
    }
  },
  "InformationModel": {
    "Default": "Fhir4.0", // information model to use when none is specified in either mapping, the _format parameter or the ACCEPT header
    "Mapping": {
      "Mode": "Off"
      //"Mode": "Path", // yourserver.org/r3 => FHIR STU3; yourserver.org/r4 => FHIR R4
      //"Map": {
      //  "/R3": "Fhir3.0",
      //  "/R4": "Fhir4.0",
      //  "/R5": "Fhir5.0"
      //}
      //"Mode": "Subdomain", // r3.yourserver.org => FHIR STU3; r4.yourserver.org => FHIR R4
      //"Map": 
      //  {
      //    "r3": "Fhir3.0",
      //    "r4": "Fhir4.0",
      //    "r5": "Fhir5.0"
      //  }
    }
  },
  "TaskFileManagement": {
    "StoragePath": "./taskfiles"
  },
  "PatientEverythingOperation": {
    "AdditionalResources": [ "Organization", "Location", "Substance", "Device", "Medication" ] // included referenced resources, additional to the Patient compartment resources
  },
  "BulkDataExport": {
    "RepeatPeriod": 60000, //ms
    "AdditionalResources": [ "Organization", "Location", "Substance", "Device", "Medication" ] // included referenced resources, additional to the Patient compartment resources
  },
  "Vonk.Plugin.BinaryWrapper": {
    "RestrictToMimeTypes": [ "application/pdf", "text/plain", "text/csv", "image/png", "image/jpeg" ]
  },
  "PipelineOptions": {
    "PluginDirectory": "./plugins",
    "Branches": [
      {
        "Path": "/",
        "Include": [
          "Vonk.Core",
          "Vonk.Fhir.R3",
          "Vonk.Fhir.R4",
          //"Vonk.Fhir.R5",
          "Vonk.Repository.Sql.SqlVonkConfiguration",
          "Vonk.Repository.Sqlite.SqliteVonkConfiguration",
          "Vonk.Repository.MongoDb.MongoDbVonkConfiguration",
          "Vonk.Repository.CosmosDb.CosmosDbVonkConfiguration",
          "Vonk.Repository.Memory.MemoryVonkConfiguration",
          "Vonk.Subscriptions",
          "Vonk.Smart",
          "Vonk.UI.Demo",
          "Vonk.Plugin.DocumentOperation.DocumentOperationConfiguration",
          "Vonk.Plugin.ConvertOperation.ConvertOperationConfiguration",
          "Vonk.Plugin.BinaryWrapper",
          "Vonk.Plugin.Audit",
          //"Vonk.Plugin.BulkDataExport",
          //"Vonk.Plugin.PatientEverything",
          "Vonk.Plugins.Terminology"
        ],
        "Exclude": [
          "Vonk.Subscriptions.Administration"
        ]
      },
      {
        "Path": "/administration",
        "Include": [
          "Vonk.Core",
          "Vonk.Fhir.R3",
          "Vonk.Fhir.R4",
          //"Vonk.Fhir.R5",
          //"Vonk.Repository.Sql.SqlTaskConfiguration",
          "Vonk.Repository.Sql.SqlAdministrationConfiguration",
          //"Vonk.Repository.Sqlite.SqliteTaskConfiguration",
          "Vonk.Repository.Sqlite.SqliteAdministrationConfiguration",
          "Vonk.Repository.MongoDb.MongoDbAdminConfiguration",
          "Vonk.Repository.Memory.MemoryAdministrationConfiguration",
          "Vonk.Subscriptions.Administration",
          "Vonk.Plugins.Terminology",
          "Vonk.Administration",
          "Vonk.Plugin.BinaryWrapper"
        ],
        "Exclude": [
          "Vonk.Core.Operations",
          "Vonk.Core.Licensing.LicenseRequestJobConfiguration"
        ]
      }
    ]
  }
}
